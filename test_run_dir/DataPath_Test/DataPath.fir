;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit DataPath : 
  module CU : 
    input clock : Clock
    input reset : Reset
    output io : {flip ins : UInt<32>, RD : UInt<5>, Rs1 : UInt<5>, Rs2 : UInt<5>, Imm : SInt<32>, Instype : UInt<1>, RegWrite : UInt<1>, MemWrite : UInt<1>, func : UInt<5>, wbselect : UInt<1>, aluselect : UInt<1>, lengthselect : UInt<2>, flip dobranch : UInt<1>, btypefun : UInt<4>, pcselec : UInt<1>, btype : UInt<1>, jump : UInt<1>}
    
    node Opcode = bits(io.ins, 6, 0) @[CU.scala 36:22]
    wire immgen : UInt<20>
    immgen <= UInt<20>("h00")
    io.btypefun <= UInt<1>("h00") @[CU.scala 38:15]
    io.btype <= UInt<1>("h00") @[CU.scala 39:12]
    io.jump <= UInt<1>("h00") @[CU.scala 40:11]
    node _T = eq(Opcode, UInt<6>("h033")) @[CU.scala 42:15]
    when _T : @[CU.scala 42:32]
      node _io_RD_T = bits(io.ins, 11, 7) @[CU.scala 43:19]
      io.RD <= _io_RD_T @[CU.scala 43:10]
      node io_func_hi = bits(io.ins, 14, 12) @[CU.scala 44:26]
      node io_func_lo = bits(io.ins, 30, 30) @[CU.scala 44:40]
      node _io_func_T = cat(io_func_hi, io_func_lo) @[Cat.scala 30:58]
      io.func <= _io_func_T @[CU.scala 44:13]
      node _io_Rs1_T = bits(io.ins, 19, 15) @[CU.scala 45:21]
      io.Rs1 <= _io_Rs1_T @[CU.scala 45:12]
      node _io_Rs2_T = bits(io.ins, 24, 20) @[CU.scala 46:21]
      io.Rs2 <= _io_Rs2_T @[CU.scala 46:12]
      io.Imm <= asSInt(UInt<1>("h00")) @[CU.scala 47:12]
      io.RegWrite <= UInt<1>("h01") @[CU.scala 48:17]
      io.MemWrite <= UInt<1>("h00") @[CU.scala 49:17]
      io.aluselect <= UInt<1>("h00") @[CU.scala 50:18]
      io.Instype <= UInt<1>("h01") @[CU.scala 51:16]
      io.wbselect <= UInt<1>("h01") @[CU.scala 52:17]
      io.lengthselect <= UInt<1>("h00") @[CU.scala 53:21]
      io.pcselec <= UInt<1>("h00") @[CU.scala 54:16]
      skip @[CU.scala 42:32]
    else : @[CU.scala 58:39]
      node _T_1 = eq(Opcode, UInt<5>("h013")) @[CU.scala 58:22]
      when _T_1 : @[CU.scala 58:39]
        node _io_RD_T_1 = bits(io.ins, 11, 7) @[CU.scala 59:21]
        io.RD <= _io_RD_T_1 @[CU.scala 59:12]
        node _io_func_T_1 = bits(io.ins, 14, 12) @[CU.scala 60:34]
        node _io_func_T_2 = bits(io.ins, 30, 30) @[CU.scala 66:28]
        node _io_func_T_3 = mux(_io_func_T_2, UInt<4>("h0b"), UInt<4>("h0a")) @[CU.scala 66:21]
        node _io_func_T_4 = eq(UInt<1>("h01"), _io_func_T_1) @[Mux.scala 80:60]
        node _io_func_T_5 = mux(_io_func_T_4, UInt<2>("h02"), UInt<1>("h00")) @[Mux.scala 80:57]
        node _io_func_T_6 = eq(UInt<2>("h02"), _io_func_T_1) @[Mux.scala 80:60]
        node _io_func_T_7 = mux(_io_func_T_6, UInt<3>("h04"), _io_func_T_5) @[Mux.scala 80:57]
        node _io_func_T_8 = eq(UInt<2>("h03"), _io_func_T_1) @[Mux.scala 80:60]
        node _io_func_T_9 = mux(_io_func_T_8, UInt<3>("h06"), _io_func_T_7) @[Mux.scala 80:57]
        node _io_func_T_10 = eq(UInt<3>("h04"), _io_func_T_1) @[Mux.scala 80:60]
        node _io_func_T_11 = mux(_io_func_T_10, UInt<4>("h08"), _io_func_T_9) @[Mux.scala 80:57]
        node _io_func_T_12 = eq(UInt<3>("h05"), _io_func_T_1) @[Mux.scala 80:60]
        node _io_func_T_13 = mux(_io_func_T_12, _io_func_T_3, _io_func_T_11) @[Mux.scala 80:57]
        node _io_func_T_14 = eq(UInt<3>("h06"), _io_func_T_1) @[Mux.scala 80:60]
        node _io_func_T_15 = mux(_io_func_T_14, UInt<4>("h0c"), _io_func_T_13) @[Mux.scala 80:57]
        node _io_func_T_16 = eq(UInt<3>("h07"), _io_func_T_1) @[Mux.scala 80:60]
        node _io_func_T_17 = mux(_io_func_T_16, UInt<4>("h0e"), _io_func_T_15) @[Mux.scala 80:57]
        io.func <= _io_func_T_17 @[CU.scala 60:15]
        node _io_Rs1_T_1 = bits(io.ins, 19, 15) @[CU.scala 70:23]
        io.Rs1 <= _io_Rs1_T_1 @[CU.scala 70:14]
        io.Rs2 <= UInt<1>("h00") @[CU.scala 71:14]
        node _io_Imm_T = bits(io.ins, 31, 20) @[CU.scala 72:23]
        node _io_Imm_T_1 = asSInt(_io_Imm_T) @[CU.scala 72:37]
        io.Imm <= _io_Imm_T_1 @[CU.scala 72:14]
        io.RegWrite <= UInt<1>("h01") @[CU.scala 73:19]
        io.MemWrite <= UInt<1>("h00") @[CU.scala 74:19]
        io.Instype <= UInt<1>("h00") @[CU.scala 75:18]
        io.wbselect <= UInt<1>("h01") @[CU.scala 76:19]
        io.aluselect <= UInt<1>("h00") @[CU.scala 77:20]
        io.lengthselect <= UInt<1>("h00") @[CU.scala 78:23]
        io.pcselec <= UInt<1>("h00") @[CU.scala 79:18]
        skip @[CU.scala 58:39]
      else : @[CU.scala 83:39]
        node _T_2 = eq(Opcode, UInt<2>("h03")) @[CU.scala 83:22]
        when _T_2 : @[CU.scala 83:39]
          node _io_RD_T_2 = bits(io.ins, 11, 7) @[CU.scala 84:22]
          io.RD <= _io_RD_T_2 @[CU.scala 84:13]
          node _io_func_T_18 = bits(io.ins, 14, 12) @[CU.scala 85:24]
          io.func <= _io_func_T_18 @[CU.scala 85:15]
          node _io_Rs1_T_2 = bits(io.ins, 19, 15) @[CU.scala 86:23]
          io.Rs1 <= _io_Rs1_T_2 @[CU.scala 86:14]
          io.Rs2 <= UInt<1>("h00") @[CU.scala 87:14]
          node _io_Imm_T_2 = bits(io.ins, 31, 20) @[CU.scala 88:23]
          node _io_Imm_T_3 = asSInt(_io_Imm_T_2) @[CU.scala 88:38]
          io.Imm <= _io_Imm_T_3 @[CU.scala 88:14]
          io.RegWrite <= UInt<1>("h01") @[CU.scala 89:19]
          io.MemWrite <= UInt<1>("h00") @[CU.scala 90:19]
          io.Instype <= UInt<1>("h00") @[CU.scala 91:18]
          io.wbselect <= UInt<1>("h01") @[CU.scala 92:19]
          io.aluselect <= UInt<1>("h00") @[CU.scala 93:20]
          node _io_lengthselect_T = bits(io.ins, 13, 12) @[CU.scala 94:32]
          io.lengthselect <= _io_lengthselect_T @[CU.scala 94:23]
          io.pcselec <= UInt<1>("h00") @[CU.scala 95:18]
          skip @[CU.scala 83:39]
        else : @[CU.scala 98:40]
          node _T_3 = eq(Opcode, UInt<6>("h023")) @[CU.scala 98:22]
          when _T_3 : @[CU.scala 98:40]
            node _io_RD_T_3 = bits(io.ins, 11, 7) @[CU.scala 99:22]
            io.RD <= _io_RD_T_3 @[CU.scala 99:13]
            io.func <= UInt<1>("h00") @[CU.scala 100:15]
            node _io_Rs1_T_3 = bits(io.ins, 19, 15) @[CU.scala 101:23]
            io.Rs1 <= _io_Rs1_T_3 @[CU.scala 101:14]
            node _io_Rs2_T_1 = bits(io.ins, 24, 20) @[CU.scala 102:23]
            io.Rs2 <= _io_Rs2_T_1 @[CU.scala 102:14]
            node io_Imm_hi = bits(io.ins, 11, 7) @[CU.scala 103:27]
            node io_Imm_lo = bits(io.ins, 31, 25) @[CU.scala 103:40]
            node _io_Imm_T_4 = cat(io_Imm_hi, io_Imm_lo) @[Cat.scala 30:58]
            node _io_Imm_T_5 = asSInt(_io_Imm_T_4) @[CU.scala 103:57]
            io.Imm <= _io_Imm_T_5 @[CU.scala 103:14]
            io.RegWrite <= UInt<1>("h00") @[CU.scala 104:19]
            io.MemWrite <= UInt<1>("h01") @[CU.scala 105:19]
            io.Instype <= UInt<1>("h00") @[CU.scala 106:18]
            io.wbselect <= UInt<1>("h00") @[CU.scala 107:19]
            io.aluselect <= UInt<1>("h01") @[CU.scala 108:20]
            node _io_lengthselect_T_1 = bits(io.ins, 14, 12) @[CU.scala 109:32]
            io.lengthselect <= _io_lengthselect_T_1 @[CU.scala 109:23]
            io.pcselec <= UInt<1>("h00") @[CU.scala 110:18]
            skip @[CU.scala 98:40]
          else : @[CU.scala 114:39]
            node _T_4 = eq(Opcode, UInt<7>("h063")) @[CU.scala 114:22]
            when _T_4 : @[CU.scala 114:39]
              io.func <= UInt<1>("h00") @[CU.scala 115:15]
              io.RD <= UInt<1>("h00") @[CU.scala 116:13]
              node _io_btypefun_T = bits(io.ins, 14, 12) @[CU.scala 117:28]
              io.btypefun <= _io_btypefun_T @[CU.scala 117:19]
              node _io_Rs1_T_4 = bits(io.ins, 19, 15) @[CU.scala 118:23]
              io.Rs1 <= _io_Rs1_T_4 @[CU.scala 118:14]
              node _io_Rs2_T_2 = bits(io.ins, 24, 20) @[CU.scala 119:23]
              io.Rs2 <= _io_Rs2_T_2 @[CU.scala 119:14]
              node _T_5 = bits(io.ins, 31, 31) @[CU.scala 120:18]
              node _T_6 = bits(_T_5, 0, 0) @[CU.scala 120:29]
              when _T_6 : @[CU.scala 120:32]
                node _immgen_T = mux(UInt<1>("h01"), UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
                immgen <= _immgen_T @[CU.scala 121:16]
                skip @[CU.scala 120:32]
              else : @[CU.scala 122:18]
                node _immgen_T_1 = mux(UInt<1>("h00"), UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
                immgen <= _immgen_T_1 @[CU.scala 123:16]
                skip @[CU.scala 122:18]
              node io_Imm_hi_hi_lo = bits(io.ins, 31, 31) @[CU.scala 125:36]
              node io_Imm_hi_lo = bits(io.ins, 7, 7) @[CU.scala 125:47]
              node io_Imm_lo_hi_hi = bits(io.ins, 30, 25) @[CU.scala 125:57]
              node io_Imm_lo_hi_lo = bits(io.ins, 11, 8) @[CU.scala 125:71]
              node io_Imm_lo_hi = cat(io_Imm_lo_hi_hi, io_Imm_lo_hi_lo) @[Cat.scala 30:58]
              node io_Imm_lo_1 = cat(io_Imm_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
              node io_Imm_hi_hi = cat(immgen, io_Imm_hi_hi_lo) @[Cat.scala 30:58]
              node io_Imm_hi_1 = cat(io_Imm_hi_hi, io_Imm_hi_lo) @[Cat.scala 30:58]
              node _io_Imm_T_6 = cat(io_Imm_hi_1, io_Imm_lo_1) @[Cat.scala 30:58]
              node _io_Imm_T_7 = shr(_io_Imm_T_6, 2) @[CU.scala 125:83]
              node _io_Imm_T_8 = asSInt(_io_Imm_T_7) @[CU.scala 125:94]
              io.Imm <= _io_Imm_T_8 @[CU.scala 125:14]
              io.MemWrite <= UInt<1>("h00") @[CU.scala 126:19]
              io.RegWrite <= UInt<1>("h00") @[CU.scala 127:19]
              io.Instype <= UInt<1>("h00") @[CU.scala 128:18]
              io.lengthselect <= UInt<1>("h00") @[CU.scala 129:23]
              io.aluselect <= UInt<1>("h01") @[CU.scala 130:20]
              io.wbselect <= UInt<1>("h00") @[CU.scala 131:19]
              io.btype <= UInt<1>("h01") @[CU.scala 132:16]
              node _io_pcselec_T = and(io.dobranch, io.btype) @[CU.scala 134:37]
              node _io_pcselec_T_1 = mux(_io_pcselec_T, UInt<1>("h01"), UInt<1>("h00")) @[CU.scala 134:24]
              io.pcselec <= _io_pcselec_T_1 @[CU.scala 134:18]
              skip @[CU.scala 114:39]
            else : @[CU.scala 136:41]
              node _T_7 = eq(Opcode, UInt<7>("h06f")) @[CU.scala 136:23]
              when _T_7 : @[CU.scala 136:41]
                node _io_RD_T_4 = bits(io.ins, 11, 7) @[CU.scala 137:20]
                io.RD <= _io_RD_T_4 @[CU.scala 137:11]
                node _T_8 = bits(io.ins, 31, 31) @[CU.scala 138:16]
                node _T_9 = bits(_T_8, 0, 0) @[CU.scala 138:27]
                when _T_9 : @[CU.scala 138:30]
                  node _hi_T = mux(UInt<1>("h01"), UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
                  immgen <= _hi_T @[CU.scala 139:14]
                  skip @[CU.scala 138:30]
                else : @[CU.scala 140:16]
                  node _hi_T_1 = mux(UInt<1>("h00"), UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
                  immgen <= _hi_T_1 @[CU.scala 141:14]
                  skip @[CU.scala 140:16]
                node io_Imm_hi_hi_hi = bits(immgen, 10, 0) @[CU.scala 143:25]
                node io_Imm_hi_hi_lo_1 = bits(io.ins, 31, 31) @[CU.scala 143:38]
                node io_Imm_hi_lo_1 = bits(io.ins, 19, 12) @[CU.scala 143:49]
                node io_Imm_lo_hi_1 = bits(io.ins, 20, 20) @[CU.scala 143:63]
                node io_Imm_lo_lo = bits(io.ins, 29, 21) @[CU.scala 143:74]
                node io_Imm_lo_2 = cat(io_Imm_lo_hi_1, io_Imm_lo_lo) @[Cat.scala 30:58]
                node io_Imm_hi_hi_1 = cat(io_Imm_hi_hi_hi, io_Imm_hi_hi_lo_1) @[Cat.scala 30:58]
                node io_Imm_hi_2 = cat(io_Imm_hi_hi_1, io_Imm_hi_lo_1) @[Cat.scala 30:58]
                node _io_Imm_T_9 = cat(io_Imm_hi_2, io_Imm_lo_2) @[Cat.scala 30:58]
                node _io_Imm_T_10 = asSInt(_io_Imm_T_9) @[CU.scala 143:89]
                node _io_Imm_T_11 = shr(_io_Imm_T_10, 2) @[CU.scala 143:92]
                io.Imm <= _io_Imm_T_11 @[CU.scala 143:12]
                io.func <= UInt<1>("h00") @[CU.scala 144:13]
                io.Rs1 <= UInt<1>("h00") @[CU.scala 145:12]
                io.Rs2 <= UInt<1>("h00") @[CU.scala 146:12]
                io.MemWrite <= UInt<1>("h00") @[CU.scala 147:17]
                io.RegWrite <= UInt<1>("h01") @[CU.scala 148:17]
                io.Instype <= UInt<1>("h00") @[CU.scala 149:16]
                io.lengthselect <= UInt<1>("h00") @[CU.scala 150:21]
                io.aluselect <= UInt<1>("h01") @[CU.scala 151:18]
                io.wbselect <= UInt<1>("h01") @[CU.scala 152:17]
                io.btype <= UInt<1>("h00") @[CU.scala 153:14]
                io.pcselec <= UInt<1>("h01") @[CU.scala 154:16]
                io.jump <= UInt<1>("h01") @[CU.scala 155:13]
                skip @[CU.scala 136:41]
              else : @[CU.scala 160:15]
                io.RD <= UInt<1>("h00") @[CU.scala 161:13]
                io.func <= UInt<1>("h00") @[CU.scala 162:15]
                io.Rs1 <= UInt<1>("h00") @[CU.scala 163:14]
                io.Rs2 <= UInt<1>("h00") @[CU.scala 164:14]
                io.RegWrite <= UInt<1>("h00") @[CU.scala 165:19]
                io.MemWrite <= UInt<1>("h00") @[CU.scala 166:19]
                io.Instype <= UInt<1>("h00") @[CU.scala 167:18]
                io.Imm <= asSInt(UInt<1>("h00")) @[CU.scala 168:14]
                io.wbselect <= UInt<1>("h00") @[CU.scala 169:19]
                io.aluselect <= UInt<1>("h00") @[CU.scala 170:20]
                io.lengthselect <= UInt<1>("h00") @[CU.scala 171:23]
                io.pcselec <= UInt<1>("h00") @[CU.scala 172:18]
                skip @[CU.scala 160:15]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip Wen : UInt<1>, flip RD : UInt<5>, flip Rs1in : UInt<5>, flip Rs2in : UInt<5>, Rs1out : SInt<32>, Rs2out : SInt<32>, flip datain : SInt<32>}
    
    cmem regFile : SInt<32>[32] @[RegisterFile.scala 15:21]
    io.Rs1out <= asSInt(UInt<1>("h00")) @[RegisterFile.scala 16:13]
    io.Rs2out <= asSInt(UInt<1>("h00")) @[RegisterFile.scala 17:13]
    node _T = neq(io.RD, UInt<1>("h00")) @[RegisterFile.scala 20:25]
    node _T_1 = and(io.Wen, _T) @[RegisterFile.scala 20:15]
    when _T_1 : @[RegisterFile.scala 20:34]
      write mport MPORT = regFile[io.RD], clock
      MPORT <= io.datain
      read mport io_Rs1out_MPORT = regFile[io.Rs1in], clock @[RegisterFile.scala 22:30]
      io.Rs1out <= io_Rs1out_MPORT @[RegisterFile.scala 22:15]
      read mport io_Rs2out_MPORT = regFile[io.Rs2in], clock @[RegisterFile.scala 23:30]
      io.Rs2out <= io_Rs2out_MPORT @[RegisterFile.scala 23:15]
      skip @[RegisterFile.scala 20:34]
    else : @[RegisterFile.scala 25:15]
      read mport io_Rs1out_MPORT_1 = regFile[io.Rs1in], clock @[RegisterFile.scala 26:32]
      io.Rs1out <= io_Rs1out_MPORT_1 @[RegisterFile.scala 26:17]
      read mport io_Rs2out_MPORT_1 = regFile[io.Rs2in], clock @[RegisterFile.scala 27:32]
      io.Rs2out <= io_Rs2out_MPORT_1 @[RegisterFile.scala 27:17]
      skip @[RegisterFile.scala 25:15]
    
  module InstMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, inst : UInt<32>}
    
    cmem imem : UInt<32>[32] @[InsMem.scala 14:18]
    node _io_inst_T = bits(io.addr, 4, 0) @[InsMem.scala 16:21]
    infer mport io_inst_MPORT = imem[_io_inst_T], clock @[InsMem.scala 16:21]
    io.inst <= io_inst_MPORT @[InsMem.scala 16:13]
    
  module Datamem : 
    input clock : Clock
    input reset : Reset
    output io : {flip Wen : UInt<1>, flip addr : UInt<32>, flip datain : SInt<32>, dataout : SInt<32>}
    
    cmem memory : SInt<32>[32] @[Datamem.scala 13:20]
    io.dataout <= asSInt(UInt<1>("h00")) @[Datamem.scala 14:14]
    when io.Wen : @[Datamem.scala 16:16]
      node _T = bits(io.addr, 4, 0)
      write mport MPORT = memory[_T], clock
      MPORT <= io.datain
      node _io_dataout_T = bits(io.addr, 4, 0) @[Datamem.scala 18:30]
      read mport io_dataout_MPORT = memory[_io_dataout_T], clock @[Datamem.scala 18:30]
      io.dataout <= io_dataout_MPORT @[Datamem.scala 18:16]
      skip @[Datamem.scala 16:16]
    node _io_dataout_T_1 = bits(io.addr, 4, 0) @[Datamem.scala 21:28]
    read mport io_dataout_MPORT_1 = memory[_io_dataout_T_1], clock @[Datamem.scala 21:28]
    io.dataout <= io_dataout_MPORT_1 @[Datamem.scala 21:14]
    
  module ALU1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : SInt<32>, flip in_B : SInt<32>, flip alu_Op : UInt<4>, out : SInt<32>, sum : SInt<32>}
    
    node _sum_T = add(io.in_A, io.in_B) @[buggedAlu.scala 47:23]
    node _sum_T_1 = tail(_sum_T, 1) @[buggedAlu.scala 47:23]
    node sum = asSInt(_sum_T_1) @[buggedAlu.scala 47:23]
    node _sub_T = sub(io.in_A, io.in_B) @[buggedAlu.scala 48:23]
    node _sub_T_1 = tail(_sub_T, 1) @[buggedAlu.scala 48:23]
    node sub = asSInt(_sub_T_1) @[buggedAlu.scala 48:23]
    node _cmp_T = lt(io.in_A, io.in_B) @[buggedAlu.scala 49:27]
    node cmp = mux(_cmp_T, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[buggedAlu.scala 49:18]
    node _cmpU_T = asUInt(io.in_A) @[buggedAlu.scala 50:34]
    node _cmpU_T_1 = asUInt(io.in_B) @[buggedAlu.scala 50:53]
    node _cmpU_T_2 = lt(_cmpU_T, _cmpU_T_1) @[buggedAlu.scala 50:37]
    node cmpU = mux(_cmpU_T_2, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[buggedAlu.scala 50:19]
    node shamt = bits(io.in_B, 4, 0) @[buggedAlu.scala 51:24]
    node _shiftrl_T = asUInt(io.in_A) @[buggedAlu.scala 53:33]
    node shiftrl = dshr(_shiftrl_T, shamt) @[buggedAlu.scala 53:36]
    node shitfl = dshl(io.in_A, shamt) @[buggedAlu.scala 54:26]
    node shiftrA = dshr(io.in_A, shamt) @[buggedAlu.scala 55:27]
    node _beq_T = eq(io.in_A, io.in_B) @[buggedAlu.scala 56:27]
    node beq = mux(_beq_T, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[buggedAlu.scala 56:18]
    node _bge_T = or(cmp, beq) @[buggedAlu.scala 57:20]
    node bge = asSInt(_bge_T) @[buggedAlu.scala 57:20]
    node _bgeu_T = asUInt(io.in_A) @[buggedAlu.scala 58:30]
    node _bgeu_T_1 = asUInt(io.in_B) @[buggedAlu.scala 58:50]
    node bgeu = geq(_bgeu_T, _bgeu_T_1) @[buggedAlu.scala 58:33]
    node _io_out_T = eq(io.alu_Op, UInt<4>("h00")) @[buggedAlu.scala 63:28]
    node _io_out_T_1 = eq(io.alu_Op, UInt<4>("h01")) @[buggedAlu.scala 64:32]
    node _io_out_T_2 = eq(io.alu_Op, UInt<4>("h04")) @[buggedAlu.scala 65:35]
    node _io_out_T_3 = eq(io.alu_Op, UInt<4>("h06")) @[buggedAlu.scala 66:39]
    node _io_out_T_4 = eq(io.alu_Op, UInt<4>("h0a")) @[buggedAlu.scala 67:43]
    node _io_out_T_5 = asSInt(shiftrl) @[buggedAlu.scala 67:70]
    node _io_out_T_6 = eq(io.alu_Op, UInt<4>("h0b")) @[buggedAlu.scala 68:47]
    node _io_out_T_7 = eq(io.alu_Op, UInt<4>("h02")) @[buggedAlu.scala 69:51]
    node _io_out_T_8 = eq(io.alu_Op, UInt<4>("h0e")) @[buggedAlu.scala 70:55]
    node _io_out_T_9 = and(io.in_A, io.in_B) @[buggedAlu.scala 70:77]
    node _io_out_T_10 = asSInt(_io_out_T_9) @[buggedAlu.scala 70:77]
    node _io_out_T_11 = eq(io.alu_Op, UInt<4>("h0c")) @[buggedAlu.scala 71:59]
    node _io_out_T_12 = or(io.in_A, io.in_B) @[buggedAlu.scala 71:80]
    node _io_out_T_13 = asSInt(_io_out_T_12) @[buggedAlu.scala 71:80]
    node _io_out_T_14 = eq(io.alu_Op, UInt<4>("h08")) @[buggedAlu.scala 72:64]
    node _io_out_T_15 = xor(io.in_A, io.in_B) @[buggedAlu.scala 72:86]
    node _io_out_T_16 = asSInt(_io_out_T_15) @[buggedAlu.scala 72:86]
    node _io_out_T_17 = mux(_io_out_T_14, _io_out_T_16, asSInt(UInt<1>("h00"))) @[buggedAlu.scala 72:53]
    node _io_out_T_18 = mux(_io_out_T_11, _io_out_T_13, _io_out_T_17) @[buggedAlu.scala 71:48]
    node _io_out_T_19 = mux(_io_out_T_8, _io_out_T_10, _io_out_T_18) @[buggedAlu.scala 70:44]
    node _io_out_T_20 = mux(_io_out_T_7, shitfl, _io_out_T_19) @[buggedAlu.scala 69:40]
    node _io_out_T_21 = mux(_io_out_T_6, shiftrA, _io_out_T_20) @[buggedAlu.scala 68:36]
    node _io_out_T_22 = mux(_io_out_T_4, _io_out_T_5, _io_out_T_21) @[buggedAlu.scala 67:32]
    node _io_out_T_23 = mux(_io_out_T_3, cmpU, _io_out_T_22) @[buggedAlu.scala 66:28]
    node _io_out_T_24 = mux(_io_out_T_2, cmp, _io_out_T_23) @[buggedAlu.scala 65:24]
    node _io_out_T_25 = mux(_io_out_T_1, sub, _io_out_T_24) @[buggedAlu.scala 64:20]
    node _io_out_T_26 = mux(_io_out_T, sum, _io_out_T_25) @[buggedAlu.scala 63:16]
    io.out <= _io_out_T_26 @[buggedAlu.scala 62:12]
    io.sum <= sum @[buggedAlu.scala 75:12]
    
  module BranchALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : SInt<32>, flip in_B : SInt<32>, flip fun3 : UInt<4>, doBranch : UInt<1>, flip isBtype : UInt<1>}
    
    node Beq = eq(io.in_A, io.in_B) @[BranchALU.scala 15:21]
    node blt = lt(io.in_A, io.in_B) @[BranchALU.scala 16:21]
    node _bgeu_T = asUInt(io.in_A) @[BranchALU.scala 17:28]
    node _bgeu_T_1 = asUInt(io.in_B) @[BranchALU.scala 17:48]
    node bgeu = geq(_bgeu_T, _bgeu_T_1) @[BranchALU.scala 17:31]
    node _bltu_T = asUInt(io.in_A) @[BranchALU.scala 18:28]
    node _bltu_T_1 = asUInt(io.in_B) @[BranchALU.scala 18:47]
    node bltu = lt(_bltu_T, _bltu_T_1) @[BranchALU.scala 18:31]
    node _T = eq(io.isBtype, UInt<1>("h01")) @[BranchALU.scala 20:19]
    when _T : @[BranchALU.scala 20:28]
      node _io_doBranch_T = eq(io.fun3, UInt<1>("h00")) @[BranchALU.scala 21:32]
      node _io_doBranch_T_1 = eq(io.fun3, UInt<1>("h01")) @[BranchALU.scala 22:19]
      node _io_doBranch_T_2 = eq(Beq, UInt<1>("h00")) @[BranchALU.scala 22:28]
      node _io_doBranch_T_3 = eq(io.fun3, UInt<3>("h04")) @[BranchALU.scala 23:21]
      node _io_doBranch_T_4 = eq(io.fun3, UInt<3>("h05")) @[BranchALU.scala 24:23]
      node _io_doBranch_T_5 = eq(blt, UInt<1>("h00")) @[BranchALU.scala 24:35]
      node _io_doBranch_T_6 = or(_io_doBranch_T_5, Beq) @[BranchALU.scala 24:40]
      node _io_doBranch_T_7 = eq(io.fun3, UInt<3>("h06")) @[BranchALU.scala 25:25]
      node _io_doBranch_T_8 = eq(io.fun3, UInt<3>("h07")) @[BranchALU.scala 26:27]
      node _io_doBranch_T_9 = mux(_io_doBranch_T_8, bgeu, UInt<1>("h00")) @[BranchALU.scala 26:18]
      node _io_doBranch_T_10 = mux(_io_doBranch_T_7, bltu, _io_doBranch_T_9) @[BranchALU.scala 25:16]
      node _io_doBranch_T_11 = mux(_io_doBranch_T_4, _io_doBranch_T_6, _io_doBranch_T_10) @[BranchALU.scala 24:14]
      node _io_doBranch_T_12 = mux(_io_doBranch_T_3, blt, _io_doBranch_T_11) @[BranchALU.scala 23:12]
      node _io_doBranch_T_13 = mux(_io_doBranch_T_1, _io_doBranch_T_2, _io_doBranch_T_12) @[BranchALU.scala 22:10]
      node _io_doBranch_T_14 = mux(_io_doBranch_T, Beq, _io_doBranch_T_13) @[BranchALU.scala 21:23]
      io.doBranch <= _io_doBranch_T_14 @[BranchALU.scala 21:17]
      skip @[BranchALU.scala 20:28]
    else : @[BranchALU.scala 29:15]
      io.doBranch <= UInt<1>("h00") @[BranchALU.scala 30:19]
      skip @[BranchALU.scala 29:15]
    
  module DataPath : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : SInt<32>}
    
    io.out <= asSInt(UInt<1>("h00")) @[DataPath.scala 11:10]
    inst cu of CU @[DataPath.scala 14:18]
    cu.clock <= clock
    cu.reset <= reset
    inst regfile of RegisterFile @[DataPath.scala 15:23]
    regfile.clock <= clock
    regfile.reset <= reset
    inst insmem of InstMem @[DataPath.scala 16:22]
    insmem.clock <= clock
    insmem.reset <= reset
    inst datamem of Datamem @[DataPath.scala 17:23]
    datamem.clock <= clock
    datamem.reset <= reset
    inst alu of ALU1 @[DataPath.scala 18:19]
    alu.clock <= clock
    alu.reset <= reset
    inst checkbranch of BranchALU @[DataPath.scala 19:27]
    checkbranch.clock <= clock
    checkbranch.reset <= reset
    reg pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[DataPath.scala 21:19]
    node _pc_T = asUInt(alu.io.out) @[DataPath.scala 22:46]
    node _pc_T_1 = add(pc, UInt<1>("h01")) @[DataPath.scala 22:51]
    node _pc_T_2 = tail(_pc_T_1, 1) @[DataPath.scala 22:51]
    node _pc_T_3 = mux(cu.io.pcselec, _pc_T, _pc_T_2) @[DataPath.scala 22:12]
    pc <= _pc_T_3 @[DataPath.scala 22:6]
    cu.io.dobranch <= checkbranch.io.doBranch @[DataPath.scala 27:18]
    checkbranch.io.fun3 <= cu.io.btypefun @[DataPath.scala 28:22]
    insmem.io.addr <= pc @[DataPath.scala 29:18]
    checkbranch.io.isBtype <= cu.io.btype @[DataPath.scala 30:26]
    cu.io.ins <= insmem.io.inst @[DataPath.scala 31:13]
    node _alu_io_alu_Op_T = mux(cu.io.aluselect, UInt<1>("h00"), cu.io.func) @[DataPath.scala 32:23]
    alu.io.alu_Op <= _alu_io_alu_Op_T @[DataPath.scala 32:17]
    regfile.io.Wen <= cu.io.RegWrite @[DataPath.scala 33:18]
    datamem.io.Wen <= cu.io.MemWrite @[DataPath.scala 34:18]
    regfile.io.RD <= cu.io.RD @[DataPath.scala 35:17]
    regfile.io.Rs1in <= cu.io.Rs1 @[DataPath.scala 36:20]
    regfile.io.Rs2in <= cu.io.Rs2 @[DataPath.scala 37:20]
    datamem.io.datain <= regfile.io.Rs2out @[DataPath.scala 38:21]
    checkbranch.io.in_A <= regfile.io.Rs1out @[DataPath.scala 39:23]
    checkbranch.io.in_B <= regfile.io.Rs2out @[DataPath.scala 40:23]
    regfile.io.datain <= alu.io.out @[DataPath.scala 41:21]
    node _alu_io_in_A_T = or(checkbranch.io.doBranch, cu.io.jump) @[DataPath.scala 43:46]
    node _alu_io_in_A_T_1 = asSInt(pc) @[DataPath.scala 43:71]
    node _alu_io_in_A_T_2 = mux(_alu_io_in_A_T, _alu_io_in_A_T_1, regfile.io.Rs1out) @[DataPath.scala 43:21]
    alu.io.in_A <= _alu_io_in_A_T_2 @[DataPath.scala 43:15]
    node _alu_io_in_B_T = eq(cu.io.Instype, UInt<1>("h00")) @[DataPath.scala 44:22]
    node _alu_io_in_B_T_1 = mux(_alu_io_in_B_T, cu.io.Imm, regfile.io.Rs2out) @[DataPath.scala 44:21]
    alu.io.in_B <= _alu_io_in_B_T_1 @[DataPath.scala 44:15]
    node _datamem_io_addr_T = asUInt(alu.io.out) @[DataPath.scala 45:39]
    datamem.io.addr <= _datamem_io_addr_T @[DataPath.scala 45:19]
    node _datamem_io_datain_T = bits(regfile.io.Rs2out, 8, 0) @[DataPath.scala 47:31]
    node _datamem_io_datain_T_1 = asSInt(_datamem_io_datain_T) @[DataPath.scala 47:44]
    node _datamem_io_datain_T_2 = bits(regfile.io.Rs2out, 15, 0) @[DataPath.scala 48:31]
    node _datamem_io_datain_T_3 = asSInt(_datamem_io_datain_T_2) @[DataPath.scala 48:45]
    node _datamem_io_datain_T_4 = eq(UInt<1>("h00"), cu.io.lengthselect) @[Mux.scala 80:60]
    node _datamem_io_datain_T_5 = mux(_datamem_io_datain_T_4, _datamem_io_datain_T_1, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _datamem_io_datain_T_6 = eq(UInt<1>("h01"), cu.io.lengthselect) @[Mux.scala 80:60]
    node _datamem_io_datain_T_7 = mux(_datamem_io_datain_T_6, _datamem_io_datain_T_3, _datamem_io_datain_T_5) @[Mux.scala 80:57]
    node _datamem_io_datain_T_8 = eq(UInt<2>("h02"), cu.io.lengthselect) @[Mux.scala 80:60]
    node _datamem_io_datain_T_9 = mux(_datamem_io_datain_T_8, regfile.io.Rs2out, _datamem_io_datain_T_7) @[Mux.scala 80:57]
    node _datamem_io_datain_T_10 = mux(cu.io.wbselect, regfile.io.Rs2out, _datamem_io_datain_T_9) @[DataPath.scala 46:27]
    datamem.io.datain <= _datamem_io_datain_T_10 @[DataPath.scala 46:21]
    node _regfile_io_datain_T = bits(datamem.io.dataout, 8, 0) @[DataPath.scala 53:32]
    node _regfile_io_datain_T_1 = asSInt(_regfile_io_datain_T) @[DataPath.scala 53:44]
    node _regfile_io_datain_T_2 = bits(datamem.io.dataout, 15, 0) @[DataPath.scala 54:32]
    node _regfile_io_datain_T_3 = asSInt(_regfile_io_datain_T_2) @[DataPath.scala 54:45]
    node _regfile_io_datain_T_4 = eq(UInt<1>("h00"), cu.io.lengthselect) @[Mux.scala 80:60]
    node _regfile_io_datain_T_5 = mux(_regfile_io_datain_T_4, _regfile_io_datain_T_1, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _regfile_io_datain_T_6 = eq(UInt<1>("h01"), cu.io.lengthselect) @[Mux.scala 80:60]
    node _regfile_io_datain_T_7 = mux(_regfile_io_datain_T_6, _regfile_io_datain_T_3, _regfile_io_datain_T_5) @[Mux.scala 80:57]
    node _regfile_io_datain_T_8 = eq(UInt<2>("h02"), cu.io.lengthselect) @[Mux.scala 80:60]
    node _regfile_io_datain_T_9 = mux(_regfile_io_datain_T_8, datamem.io.dataout, _regfile_io_datain_T_7) @[Mux.scala 80:57]
    node _regfile_io_datain_T_10 = mux(cu.io.wbselect, alu.io.out, _regfile_io_datain_T_9) @[DataPath.scala 52:28]
    regfile.io.datain <= _regfile_io_datain_T_10 @[DataPath.scala 52:21]
    io.out <= alu.io.out @[DataPath.scala 56:10]
    
