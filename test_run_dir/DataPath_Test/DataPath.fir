;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit DataPath : 
  module PC : 
    input clock : Clock
    input reset : Reset
    output io : {nextaddr : UInt<32>}
    
    reg counter : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[PC.scala 11:24]
    node _counter_T = add(counter, UInt<3>("h04")) @[PC.scala 14:24]
    node _counter_T_1 = tail(_counter_T, 1) @[PC.scala 14:24]
    counter <= _counter_T_1 @[PC.scala 14:13]
    io.nextaddr <= counter @[PC.scala 15:17]
    
  module CU : 
    input clock : Clock
    input reset : Reset
    output io : {flip ins : UInt<32>, RD : UInt<5>, Rs1 : UInt<5>, Rs2 : UInt<5>, Imm : SInt<32>, Instype : UInt<1>, RegWrite : UInt<1>, MemWrite : UInt<1>, func : UInt<5>, wbselect : UInt<1>, aluselect : UInt<1>, lengthselect : UInt<2>}
    
    node Opcode = bits(io.ins, 6, 0) @[CU.scala 30:22]
    node _T = eq(Opcode, UInt<6>("h033")) @[CU.scala 32:15]
    when _T : @[CU.scala 32:32]
      node _io_RD_T = bits(io.ins, 11, 7) @[CU.scala 33:19]
      io.RD <= _io_RD_T @[CU.scala 33:10]
      node io_func_hi = bits(io.ins, 14, 12) @[CU.scala 34:26]
      node io_func_lo = bits(io.ins, 30, 30) @[CU.scala 34:40]
      node _io_func_T = cat(io_func_hi, io_func_lo) @[Cat.scala 30:58]
      io.func <= _io_func_T @[CU.scala 34:13]
      node _io_Rs1_T = bits(io.ins, 19, 15) @[CU.scala 35:21]
      io.Rs1 <= _io_Rs1_T @[CU.scala 35:12]
      node _io_Rs2_T = bits(io.ins, 24, 20) @[CU.scala 36:21]
      io.Rs2 <= _io_Rs2_T @[CU.scala 36:12]
      io.Imm <= asSInt(UInt<1>("h00")) @[CU.scala 37:12]
      io.RegWrite <= UInt<1>("h01") @[CU.scala 38:17]
      io.MemWrite <= UInt<1>("h00") @[CU.scala 39:17]
      io.aluselect <= UInt<1>("h00") @[CU.scala 40:18]
      io.Instype <= UInt<1>("h01") @[CU.scala 41:16]
      io.wbselect <= UInt<1>("h01") @[CU.scala 42:17]
      io.lengthselect <= UInt<1>("h00") @[CU.scala 43:21]
      skip @[CU.scala 32:32]
    else : @[CU.scala 45:39]
      node _T_1 = eq(Opcode, UInt<5>("h013")) @[CU.scala 45:22]
      when _T_1 : @[CU.scala 45:39]
        node _io_RD_T_1 = bits(io.ins, 11, 7) @[CU.scala 46:21]
        io.RD <= _io_RD_T_1 @[CU.scala 46:12]
        node _io_func_T_1 = bits(io.ins, 14, 12) @[CU.scala 47:34]
        node _io_func_T_2 = bits(io.ins, 30, 30) @[CU.scala 53:28]
        node _io_func_T_3 = mux(_io_func_T_2, UInt<4>("h0b"), UInt<4>("h0a")) @[CU.scala 53:21]
        node _io_func_T_4 = eq(UInt<1>("h01"), _io_func_T_1) @[Mux.scala 80:60]
        node _io_func_T_5 = mux(_io_func_T_4, UInt<2>("h02"), UInt<1>("h00")) @[Mux.scala 80:57]
        node _io_func_T_6 = eq(UInt<2>("h02"), _io_func_T_1) @[Mux.scala 80:60]
        node _io_func_T_7 = mux(_io_func_T_6, UInt<3>("h04"), _io_func_T_5) @[Mux.scala 80:57]
        node _io_func_T_8 = eq(UInt<2>("h03"), _io_func_T_1) @[Mux.scala 80:60]
        node _io_func_T_9 = mux(_io_func_T_8, UInt<3>("h06"), _io_func_T_7) @[Mux.scala 80:57]
        node _io_func_T_10 = eq(UInt<3>("h04"), _io_func_T_1) @[Mux.scala 80:60]
        node _io_func_T_11 = mux(_io_func_T_10, UInt<4>("h08"), _io_func_T_9) @[Mux.scala 80:57]
        node _io_func_T_12 = eq(UInt<3>("h05"), _io_func_T_1) @[Mux.scala 80:60]
        node _io_func_T_13 = mux(_io_func_T_12, _io_func_T_3, _io_func_T_11) @[Mux.scala 80:57]
        node _io_func_T_14 = eq(UInt<3>("h06"), _io_func_T_1) @[Mux.scala 80:60]
        node _io_func_T_15 = mux(_io_func_T_14, UInt<4>("h0c"), _io_func_T_13) @[Mux.scala 80:57]
        node _io_func_T_16 = eq(UInt<3>("h07"), _io_func_T_1) @[Mux.scala 80:60]
        node _io_func_T_17 = mux(_io_func_T_16, UInt<4>("h0e"), _io_func_T_15) @[Mux.scala 80:57]
        io.func <= _io_func_T_17 @[CU.scala 47:15]
        node _io_Rs1_T_1 = bits(io.ins, 19, 15) @[CU.scala 57:23]
        io.Rs1 <= _io_Rs1_T_1 @[CU.scala 57:14]
        io.Rs2 <= UInt<1>("h00") @[CU.scala 58:14]
        node _io_Imm_T = bits(io.ins, 31, 20) @[CU.scala 59:23]
        node _io_Imm_T_1 = asSInt(_io_Imm_T) @[CU.scala 59:37]
        io.Imm <= _io_Imm_T_1 @[CU.scala 59:14]
        io.RegWrite <= UInt<1>("h01") @[CU.scala 60:19]
        io.MemWrite <= UInt<1>("h00") @[CU.scala 61:19]
        io.Instype <= UInt<1>("h00") @[CU.scala 62:18]
        io.wbselect <= UInt<1>("h01") @[CU.scala 63:19]
        io.aluselect <= UInt<1>("h00") @[CU.scala 64:20]
        io.lengthselect <= UInt<1>("h00") @[CU.scala 65:23]
        skip @[CU.scala 45:39]
      else : @[CU.scala 69:39]
        node _T_2 = eq(Opcode, UInt<2>("h03")) @[CU.scala 69:22]
        when _T_2 : @[CU.scala 69:39]
          node _io_RD_T_2 = bits(io.ins, 11, 7) @[CU.scala 70:22]
          io.RD <= _io_RD_T_2 @[CU.scala 70:13]
          node _io_func_T_18 = bits(io.ins, 14, 12) @[CU.scala 71:24]
          io.func <= _io_func_T_18 @[CU.scala 71:15]
          node _io_Rs1_T_2 = bits(io.ins, 19, 15) @[CU.scala 72:23]
          io.Rs1 <= _io_Rs1_T_2 @[CU.scala 72:14]
          io.Rs2 <= UInt<1>("h00") @[CU.scala 73:14]
          node _io_Imm_T_2 = bits(io.ins, 31, 20) @[CU.scala 74:23]
          node _io_Imm_T_3 = asSInt(_io_Imm_T_2) @[CU.scala 74:38]
          io.Imm <= _io_Imm_T_3 @[CU.scala 74:14]
          io.RegWrite <= UInt<1>("h01") @[CU.scala 75:19]
          io.MemWrite <= UInt<1>("h00") @[CU.scala 76:19]
          io.Instype <= UInt<1>("h00") @[CU.scala 77:18]
          io.wbselect <= UInt<1>("h01") @[CU.scala 78:19]
          io.aluselect <= UInt<1>("h00") @[CU.scala 79:20]
          node _io_lengthselect_T = bits(io.ins, 13, 12) @[CU.scala 80:32]
          io.lengthselect <= _io_lengthselect_T @[CU.scala 80:23]
          skip @[CU.scala 69:39]
        else : @[CU.scala 83:40]
          node _T_3 = eq(Opcode, UInt<6>("h023")) @[CU.scala 83:22]
          when _T_3 : @[CU.scala 83:40]
            node _io_RD_T_3 = bits(io.ins, 11, 7) @[CU.scala 84:22]
            io.RD <= _io_RD_T_3 @[CU.scala 84:13]
            io.func <= UInt<1>("h00") @[CU.scala 85:15]
            node _io_Rs1_T_3 = bits(io.ins, 19, 15) @[CU.scala 86:23]
            io.Rs1 <= _io_Rs1_T_3 @[CU.scala 86:14]
            node _io_Rs2_T_1 = bits(io.ins, 24, 20) @[CU.scala 87:23]
            io.Rs2 <= _io_Rs2_T_1 @[CU.scala 87:14]
            node io_Imm_hi = bits(io.ins, 11, 7) @[CU.scala 88:27]
            node io_Imm_lo = bits(io.ins, 31, 25) @[CU.scala 88:40]
            node _io_Imm_T_4 = cat(io_Imm_hi, io_Imm_lo) @[Cat.scala 30:58]
            node _io_Imm_T_5 = asSInt(_io_Imm_T_4) @[CU.scala 88:57]
            io.Imm <= _io_Imm_T_5 @[CU.scala 88:14]
            io.RegWrite <= UInt<1>("h00") @[CU.scala 89:19]
            io.MemWrite <= UInt<1>("h01") @[CU.scala 90:19]
            io.Instype <= UInt<1>("h00") @[CU.scala 91:18]
            io.wbselect <= UInt<1>("h00") @[CU.scala 92:19]
            io.aluselect <= UInt<1>("h01") @[CU.scala 93:20]
            node _io_lengthselect_T_1 = bits(io.ins, 14, 12) @[CU.scala 94:32]
            io.lengthselect <= _io_lengthselect_T_1 @[CU.scala 94:23]
            skip @[CU.scala 83:40]
          else : @[CU.scala 98:15]
            io.RD <= UInt<1>("h00") @[CU.scala 99:13]
            io.func <= UInt<1>("h00") @[CU.scala 100:15]
            io.Rs1 <= UInt<1>("h00") @[CU.scala 101:14]
            io.Rs2 <= UInt<1>("h00") @[CU.scala 102:14]
            io.RegWrite <= UInt<1>("h00") @[CU.scala 103:19]
            io.MemWrite <= UInt<1>("h00") @[CU.scala 104:19]
            io.Instype <= UInt<1>("h00") @[CU.scala 105:18]
            io.Imm <= asSInt(UInt<1>("h00")) @[CU.scala 106:14]
            io.wbselect <= UInt<1>("h00") @[CU.scala 107:19]
            io.aluselect <= UInt<1>("h00") @[CU.scala 108:20]
            io.lengthselect <= UInt<1>("h00") @[CU.scala 109:23]
            skip @[CU.scala 98:15]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip Wen : UInt<1>, flip RD : UInt<5>, flip Rs1in : UInt<5>, flip Rs2in : UInt<5>, Rs1out : SInt<32>, Rs2out : SInt<32>, flip datain : SInt<32>}
    
    cmem regFile : SInt<32>[32] @[RegisterFile.scala 15:21]
    io.Rs1out <= asSInt(UInt<1>("h00")) @[RegisterFile.scala 16:13]
    io.Rs2out <= asSInt(UInt<1>("h00")) @[RegisterFile.scala 17:13]
    node _T = neq(io.RD, UInt<1>("h00")) @[RegisterFile.scala 20:25]
    node _T_1 = and(io.Wen, _T) @[RegisterFile.scala 20:15]
    when _T_1 : @[RegisterFile.scala 20:34]
      write mport MPORT = regFile[io.RD], clock
      MPORT <= io.datain
      read mport io_Rs1out_MPORT = regFile[io.Rs1in], clock @[RegisterFile.scala 22:30]
      io.Rs1out <= io_Rs1out_MPORT @[RegisterFile.scala 22:15]
      read mport io_Rs2out_MPORT = regFile[io.Rs2in], clock @[RegisterFile.scala 23:30]
      io.Rs2out <= io_Rs2out_MPORT @[RegisterFile.scala 23:15]
      skip @[RegisterFile.scala 20:34]
    else : @[RegisterFile.scala 25:15]
      read mport io_Rs1out_MPORT_1 = regFile[io.Rs1in], clock @[RegisterFile.scala 26:32]
      io.Rs1out <= io_Rs1out_MPORT_1 @[RegisterFile.scala 26:17]
      read mport io_Rs2out_MPORT_1 = regFile[io.Rs2in], clock @[RegisterFile.scala 27:32]
      io.Rs2out <= io_Rs2out_MPORT_1 @[RegisterFile.scala 27:17]
      skip @[RegisterFile.scala 25:15]
    
  module InstMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, inst : UInt<32>}
    
    cmem imem : UInt<32>[32] @[InsMem.scala 14:18]
    node _io_inst_T = div(io.addr, UInt<3>("h04")) @[InsMem.scala 16:33]
    node _io_inst_T_1 = bits(_io_inst_T, 4, 0) @[InsMem.scala 16:21]
    infer mport io_inst_MPORT = imem[_io_inst_T_1], clock @[InsMem.scala 16:21]
    io.inst <= io_inst_MPORT @[InsMem.scala 16:13]
    
  module Datamem : 
    input clock : Clock
    input reset : Reset
    output io : {flip Wen : UInt<1>, flip addr : UInt<32>, flip datain : SInt<32>, dataout : SInt<32>}
    
    cmem memory : SInt<32>[32] @[Datamem.scala 13:20]
    io.dataout <= asSInt(UInt<1>("h00")) @[Datamem.scala 14:14]
    when io.Wen : @[Datamem.scala 16:16]
      node _T = bits(io.addr, 4, 0)
      write mport MPORT = memory[_T], clock
      MPORT <= io.datain
      node _io_dataout_T = bits(io.addr, 4, 0) @[Datamem.scala 18:30]
      read mport io_dataout_MPORT = memory[_io_dataout_T], clock @[Datamem.scala 18:30]
      io.dataout <= io_dataout_MPORT @[Datamem.scala 18:16]
      skip @[Datamem.scala 16:16]
    node _io_dataout_T_1 = bits(io.addr, 4, 0) @[Datamem.scala 21:28]
    read mport io_dataout_MPORT_1 = memory[_io_dataout_T_1], clock @[Datamem.scala 21:28]
    io.dataout <= io_dataout_MPORT_1 @[Datamem.scala 21:14]
    
  module ALU1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : SInt<32>, flip in_B : SInt<32>, flip alu_Op : UInt<4>, out : SInt<32>, sum : SInt<32>}
    
    node _sum_T = add(io.in_A, io.in_B) @[buggedAlu.scala 46:23]
    node _sum_T_1 = tail(_sum_T, 1) @[buggedAlu.scala 46:23]
    node sum = asSInt(_sum_T_1) @[buggedAlu.scala 46:23]
    node _sub_T = sub(io.in_A, io.in_B) @[buggedAlu.scala 47:23]
    node _sub_T_1 = tail(_sub_T, 1) @[buggedAlu.scala 47:23]
    node sub = asSInt(_sub_T_1) @[buggedAlu.scala 47:23]
    node _cmp_T = lt(io.in_A, io.in_B) @[buggedAlu.scala 48:27]
    node cmp = mux(_cmp_T, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[buggedAlu.scala 48:18]
    node _cmpU_T = asUInt(io.in_A) @[buggedAlu.scala 49:34]
    node _cmpU_T_1 = asUInt(io.in_B) @[buggedAlu.scala 49:53]
    node _cmpU_T_2 = lt(_cmpU_T, _cmpU_T_1) @[buggedAlu.scala 49:37]
    node cmpU = mux(_cmpU_T_2, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[buggedAlu.scala 49:19]
    node shamt = bits(io.in_B, 4, 0) @[buggedAlu.scala 50:24]
    node _shiftrl_T = asUInt(io.in_A) @[buggedAlu.scala 52:33]
    node shiftrl = dshr(_shiftrl_T, shamt) @[buggedAlu.scala 52:36]
    node shitfl = dshl(io.in_A, shamt) @[buggedAlu.scala 53:26]
    node shiftrA = dshr(io.in_A, shamt) @[buggedAlu.scala 54:27]
    node div = div(io.in_A, io.in_B) @[buggedAlu.scala 55:23]
    node rem = rem(io.in_A, io.in_B) @[buggedAlu.scala 56:23]
    node _io_out_T = eq(io.alu_Op, UInt<4>("h00")) @[buggedAlu.scala 59:28]
    node _io_out_T_1 = eq(io.alu_Op, UInt<4>("h01")) @[buggedAlu.scala 60:32]
    node _io_out_T_2 = eq(io.alu_Op, UInt<4>("h04")) @[buggedAlu.scala 61:35]
    node _io_out_T_3 = eq(io.alu_Op, UInt<4>("h06")) @[buggedAlu.scala 62:39]
    node _io_out_T_4 = eq(io.alu_Op, UInt<4>("h0a")) @[buggedAlu.scala 63:43]
    node _io_out_T_5 = asSInt(shiftrl) @[buggedAlu.scala 63:70]
    node _io_out_T_6 = eq(io.alu_Op, UInt<4>("h0b")) @[buggedAlu.scala 64:47]
    node _io_out_T_7 = eq(io.alu_Op, UInt<4>("h02")) @[buggedAlu.scala 65:51]
    node _io_out_T_8 = eq(io.alu_Op, UInt<4>("h0e")) @[buggedAlu.scala 66:55]
    node _io_out_T_9 = and(io.in_A, io.in_B) @[buggedAlu.scala 66:77]
    node _io_out_T_10 = asSInt(_io_out_T_9) @[buggedAlu.scala 66:77]
    node _io_out_T_11 = eq(io.alu_Op, UInt<4>("h0c")) @[buggedAlu.scala 67:59]
    node _io_out_T_12 = or(io.in_A, io.in_B) @[buggedAlu.scala 67:80]
    node _io_out_T_13 = asSInt(_io_out_T_12) @[buggedAlu.scala 67:80]
    node _io_out_T_14 = eq(io.alu_Op, UInt<4>("h08")) @[buggedAlu.scala 68:64]
    node _io_out_T_15 = xor(io.in_A, io.in_B) @[buggedAlu.scala 68:86]
    node _io_out_T_16 = asSInt(_io_out_T_15) @[buggedAlu.scala 68:86]
    node _io_out_T_17 = eq(io.alu_Op, UInt<4>("h0d")) @[buggedAlu.scala 69:67]
    node _io_out_T_18 = eq(io.alu_Op, UInt<4>("h0f")) @[buggedAlu.scala 70:71]
    node _io_out_T_19 = mux(_io_out_T_18, io.in_B, asSInt(UInt<1>("h00"))) @[buggedAlu.scala 70:60]
    node _io_out_T_20 = mux(_io_out_T_17, io.in_A, _io_out_T_19) @[buggedAlu.scala 69:56]
    node _io_out_T_21 = mux(_io_out_T_14, _io_out_T_16, _io_out_T_20) @[buggedAlu.scala 68:53]
    node _io_out_T_22 = mux(_io_out_T_11, _io_out_T_13, _io_out_T_21) @[buggedAlu.scala 67:48]
    node _io_out_T_23 = mux(_io_out_T_8, _io_out_T_10, _io_out_T_22) @[buggedAlu.scala 66:44]
    node _io_out_T_24 = mux(_io_out_T_7, shitfl, _io_out_T_23) @[buggedAlu.scala 65:40]
    node _io_out_T_25 = mux(_io_out_T_6, shiftrA, _io_out_T_24) @[buggedAlu.scala 64:36]
    node _io_out_T_26 = mux(_io_out_T_4, _io_out_T_5, _io_out_T_25) @[buggedAlu.scala 63:32]
    node _io_out_T_27 = mux(_io_out_T_3, cmpU, _io_out_T_26) @[buggedAlu.scala 62:28]
    node _io_out_T_28 = mux(_io_out_T_2, cmp, _io_out_T_27) @[buggedAlu.scala 61:24]
    node _io_out_T_29 = mux(_io_out_T_1, sub, _io_out_T_28) @[buggedAlu.scala 60:20]
    node _io_out_T_30 = mux(_io_out_T, sum, _io_out_T_29) @[buggedAlu.scala 59:16]
    io.out <= _io_out_T_30 @[buggedAlu.scala 58:12]
    io.sum <= sum @[buggedAlu.scala 76:12]
    
  module DataPath : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : SInt<32>}
    
    io.out <= asSInt(UInt<1>("h00")) @[DataPath.scala 11:10]
    inst pc of PC @[DataPath.scala 13:18]
    pc.clock <= clock
    pc.reset <= reset
    inst cu of CU @[DataPath.scala 14:18]
    cu.clock <= clock
    cu.reset <= reset
    inst regfile of RegisterFile @[DataPath.scala 15:23]
    regfile.clock <= clock
    regfile.reset <= reset
    inst insmem of InstMem @[DataPath.scala 16:22]
    insmem.clock <= clock
    insmem.reset <= reset
    inst datamem of Datamem @[DataPath.scala 17:23]
    datamem.clock <= clock
    datamem.reset <= reset
    inst alu of ALU1 @[DataPath.scala 18:19]
    alu.clock <= clock
    alu.reset <= reset
    insmem.io.addr <= pc.io.nextaddr @[DataPath.scala 21:18]
    cu.io.ins <= insmem.io.inst @[DataPath.scala 22:13]
    node _alu_io_alu_Op_T = mux(cu.io.aluselect, UInt<1>("h00"), cu.io.func) @[DataPath.scala 23:23]
    alu.io.alu_Op <= _alu_io_alu_Op_T @[DataPath.scala 23:17]
    regfile.io.Wen <= cu.io.RegWrite @[DataPath.scala 24:18]
    datamem.io.Wen <= cu.io.MemWrite @[DataPath.scala 25:18]
    regfile.io.RD <= cu.io.RD @[DataPath.scala 26:17]
    regfile.io.Rs1in <= cu.io.Rs1 @[DataPath.scala 27:20]
    regfile.io.Rs2in <= cu.io.Rs2 @[DataPath.scala 28:20]
    datamem.io.datain <= regfile.io.Rs2out @[DataPath.scala 29:21]
    alu.io.in_A <= regfile.io.Rs1out @[DataPath.scala 30:15]
    node _alu_io_in_B_T = eq(cu.io.Instype, UInt<1>("h00")) @[DataPath.scala 31:22]
    node _alu_io_in_B_T_1 = mux(_alu_io_in_B_T, cu.io.Imm, regfile.io.Rs2out) @[DataPath.scala 31:21]
    alu.io.in_B <= _alu_io_in_B_T_1 @[DataPath.scala 31:15]
    node _datamem_io_addr_T = asUInt(alu.io.out) @[DataPath.scala 32:39]
    datamem.io.addr <= _datamem_io_addr_T @[DataPath.scala 32:19]
    node _datamem_io_datain_T = bits(regfile.io.Rs2out, 8, 0) @[DataPath.scala 34:31]
    node _datamem_io_datain_T_1 = asSInt(_datamem_io_datain_T) @[DataPath.scala 34:44]
    node _datamem_io_datain_T_2 = bits(regfile.io.Rs2out, 15, 0) @[DataPath.scala 35:31]
    node _datamem_io_datain_T_3 = asSInt(_datamem_io_datain_T_2) @[DataPath.scala 35:45]
    node _datamem_io_datain_T_4 = eq(UInt<1>("h00"), cu.io.lengthselect) @[Mux.scala 80:60]
    node _datamem_io_datain_T_5 = mux(_datamem_io_datain_T_4, _datamem_io_datain_T_1, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _datamem_io_datain_T_6 = eq(UInt<1>("h01"), cu.io.lengthselect) @[Mux.scala 80:60]
    node _datamem_io_datain_T_7 = mux(_datamem_io_datain_T_6, _datamem_io_datain_T_3, _datamem_io_datain_T_5) @[Mux.scala 80:57]
    node _datamem_io_datain_T_8 = eq(UInt<2>("h02"), cu.io.lengthselect) @[Mux.scala 80:60]
    node _datamem_io_datain_T_9 = mux(_datamem_io_datain_T_8, regfile.io.Rs2out, _datamem_io_datain_T_7) @[Mux.scala 80:57]
    node _datamem_io_datain_T_10 = mux(cu.io.wbselect, regfile.io.Rs2out, _datamem_io_datain_T_9) @[DataPath.scala 33:27]
    datamem.io.datain <= _datamem_io_datain_T_10 @[DataPath.scala 33:21]
    node _regfile_io_datain_T = bits(datamem.io.dataout, 8, 0) @[DataPath.scala 40:32]
    node _regfile_io_datain_T_1 = asSInt(_regfile_io_datain_T) @[DataPath.scala 40:44]
    node _regfile_io_datain_T_2 = bits(datamem.io.dataout, 15, 0) @[DataPath.scala 41:32]
    node _regfile_io_datain_T_3 = asSInt(_regfile_io_datain_T_2) @[DataPath.scala 41:45]
    node _regfile_io_datain_T_4 = eq(UInt<1>("h00"), cu.io.lengthselect) @[Mux.scala 80:60]
    node _regfile_io_datain_T_5 = mux(_regfile_io_datain_T_4, _regfile_io_datain_T_1, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _regfile_io_datain_T_6 = eq(UInt<1>("h01"), cu.io.lengthselect) @[Mux.scala 80:60]
    node _regfile_io_datain_T_7 = mux(_regfile_io_datain_T_6, _regfile_io_datain_T_3, _regfile_io_datain_T_5) @[Mux.scala 80:57]
    node _regfile_io_datain_T_8 = eq(UInt<2>("h02"), cu.io.lengthselect) @[Mux.scala 80:60]
    node _regfile_io_datain_T_9 = mux(_regfile_io_datain_T_8, datamem.io.dataout, _regfile_io_datain_T_7) @[Mux.scala 80:57]
    node _regfile_io_datain_T_10 = mux(cu.io.wbselect, alu.io.out, _regfile_io_datain_T_9) @[DataPath.scala 39:27]
    regfile.io.datain <= _regfile_io_datain_T_10 @[DataPath.scala 39:21]
    io.out <= alu.io.out @[DataPath.scala 43:10]
    
