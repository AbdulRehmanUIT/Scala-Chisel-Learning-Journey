;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit DataPath : 
  module PC : 
    input clock : Clock
    input reset : Reset
    output io : {nextaddr : UInt<32>}
    
    reg counter : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[PC.scala 11:24]
    node _counter_T = add(counter, UInt<3>("h04")) @[PC.scala 14:24]
    node _counter_T_1 = tail(_counter_T, 1) @[PC.scala 14:24]
    counter <= _counter_T_1 @[PC.scala 14:13]
    io.nextaddr <= counter @[PC.scala 15:17]
    
  module CU : 
    input clock : Clock
    input reset : Reset
    output io : {flip ins : UInt<32>, RD : UInt<5>, Rs1 : UInt<5>, Rs2 : UInt<5>, Imm : UInt<32>, Instype : UInt<1>, RegWrite : UInt<1>, MemWrite : UInt<1>, func : UInt<5>}
    
    node Opcode = bits(io.ins, 6, 0) @[CU.scala 27:22]
    node _T = eq(Opcode, UInt<6>("h033")) @[CU.scala 29:15]
    when _T : @[CU.scala 29:32]
      node _io_RD_T = bits(io.ins, 11, 7) @[CU.scala 30:19]
      io.RD <= _io_RD_T @[CU.scala 30:10]
      node io_func_hi = bits(io.ins, 14, 12) @[CU.scala 31:26]
      node io_func_lo = bits(io.ins, 30, 30) @[CU.scala 31:40]
      node _io_func_T = cat(io_func_hi, io_func_lo) @[Cat.scala 30:58]
      io.func <= _io_func_T @[CU.scala 31:13]
      node _io_Rs1_T = bits(io.ins, 19, 15) @[CU.scala 32:21]
      io.Rs1 <= _io_Rs1_T @[CU.scala 32:12]
      node _io_Rs2_T = bits(io.ins, 24, 20) @[CU.scala 33:21]
      io.Rs2 <= _io_Rs2_T @[CU.scala 33:12]
      io.Imm <= UInt<1>("h00") @[CU.scala 34:12]
      io.RegWrite <= UInt<1>("h01") @[CU.scala 35:17]
      io.MemWrite <= UInt<1>("h00") @[CU.scala 36:17]
      io.Instype <= UInt<1>("h01") @[CU.scala 37:16]
      skip @[CU.scala 29:32]
    else : @[CU.scala 39:39]
      node _T_1 = eq(Opcode, UInt<5>("h013")) @[CU.scala 39:22]
      when _T_1 : @[CU.scala 39:39]
        node _io_RD_T_1 = bits(io.ins, 11, 7) @[CU.scala 40:21]
        io.RD <= _io_RD_T_1 @[CU.scala 40:12]
        node _io_func_T_1 = bits(io.ins, 14, 12) @[CU.scala 41:24]
        io.func <= _io_func_T_1 @[CU.scala 41:15]
        node _io_Rs1_T_1 = bits(io.ins, 19, 15) @[CU.scala 42:23]
        io.Rs1 <= _io_Rs1_T_1 @[CU.scala 42:14]
        io.Rs2 <= UInt<1>("h00") @[CU.scala 43:14]
        node _io_Imm_T = bits(io.ins, 31, 20) @[CU.scala 44:23]
        io.Imm <= _io_Imm_T @[CU.scala 44:14]
        io.RegWrite <= UInt<1>("h01") @[CU.scala 45:19]
        io.MemWrite <= UInt<1>("h00") @[CU.scala 46:19]
        io.Instype <= UInt<1>("h00") @[CU.scala 47:18]
        skip @[CU.scala 39:39]
      else : @[CU.scala 50:15]
        io.RD <= UInt<1>("h00") @[CU.scala 51:13]
        io.func <= UInt<1>("h00") @[CU.scala 52:15]
        io.Rs1 <= UInt<1>("h00") @[CU.scala 53:14]
        io.Rs2 <= UInt<1>("h00") @[CU.scala 54:14]
        io.RegWrite <= UInt<1>("h00") @[CU.scala 55:19]
        io.MemWrite <= UInt<1>("h00") @[CU.scala 56:19]
        io.Instype <= UInt<1>("h00") @[CU.scala 57:18]
        io.Imm <= UInt<1>("h00") @[CU.scala 58:14]
        skip @[CU.scala 50:15]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip Wen : UInt<1>, flip RD : UInt<5>, flip Rs1in : UInt<5>, flip Rs2in : UInt<5>, Rs1out : UInt<32>, Rs2out : UInt<32>, flip datain : UInt<32>}
    
    cmem regFile : UInt<32>[32] @[RegisterFile.scala 15:21]
    io.Rs1out <= UInt<1>("h00") @[RegisterFile.scala 16:13]
    io.Rs2out <= UInt<1>("h00") @[RegisterFile.scala 17:13]
    node _T = neq(io.RD, UInt<1>("h00")) @[RegisterFile.scala 20:25]
    node _T_1 = and(io.Wen, _T) @[RegisterFile.scala 20:15]
    when _T_1 : @[RegisterFile.scala 20:34]
      write mport MPORT = regFile[io.RD], clock
      MPORT <= io.datain
      read mport io_Rs1out_MPORT = regFile[io.Rs1in], clock @[RegisterFile.scala 22:30]
      io.Rs1out <= io_Rs1out_MPORT @[RegisterFile.scala 22:15]
      read mport io_Rs2out_MPORT = regFile[io.Rs2in], clock @[RegisterFile.scala 23:30]
      io.Rs2out <= io_Rs2out_MPORT @[RegisterFile.scala 23:15]
      skip @[RegisterFile.scala 20:34]
    else : @[RegisterFile.scala 25:15]
      read mport io_Rs1out_MPORT_1 = regFile[io.Rs1in], clock @[RegisterFile.scala 26:32]
      io.Rs1out <= io_Rs1out_MPORT_1 @[RegisterFile.scala 26:17]
      read mport io_Rs2out_MPORT_1 = regFile[io.Rs2in], clock @[RegisterFile.scala 27:32]
      io.Rs2out <= io_Rs2out_MPORT_1 @[RegisterFile.scala 27:17]
      skip @[RegisterFile.scala 25:15]
    
  module InstMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, inst : UInt<32>}
    
    cmem imem : UInt<32>[32] @[InsMem.scala 14:18]
    node _io_inst_T = div(io.addr, UInt<3>("h04")) @[InsMem.scala 16:33]
    node _io_inst_T_1 = bits(_io_inst_T, 4, 0) @[InsMem.scala 16:21]
    infer mport io_inst_MPORT = imem[_io_inst_T_1], clock @[InsMem.scala 16:21]
    io.inst <= io_inst_MPORT @[InsMem.scala 16:13]
    
  module ALU1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : UInt<32>, flip in_B : UInt<32>, flip alu_Op : UInt<4>, out : UInt<32>, sum : UInt<32>}
    
    node _sum_T = bits(io.alu_Op, 0, 0) @[buggedAlu.scala 50:38]
    node _sum_T_1 = sub(UInt<1>("h00"), io.in_B) @[buggedAlu.scala 50:44]
    node _sum_T_2 = tail(_sum_T_1, 1) @[buggedAlu.scala 50:44]
    node _sum_T_3 = mux(_sum_T, _sum_T_2, io.in_B) @[buggedAlu.scala 50:28]
    node _sum_T_4 = add(io.in_A, _sum_T_3) @[buggedAlu.scala 50:23]
    node sum = tail(_sum_T_4, 1) @[buggedAlu.scala 50:23]
    node _cmp_T = lt(io.in_A, io.in_B) @[buggedAlu.scala 51:27]
    node cmp = mux(_cmp_T, UInt<1>("h01"), UInt<1>("h00")) @[buggedAlu.scala 51:18]
    node shamt = bits(io.in_B, 4, 0) @[buggedAlu.scala 52:24]
    node _shin_T = bits(io.alu_Op, 3, 3) @[buggedAlu.scala 53:29]
    node _shin_T_1 = shl(UInt<16>("h0ffff"), 16) @[Bitwise.scala 102:47]
    node _shin_T_2 = xor(UInt<32>("h0ffffffff"), _shin_T_1) @[Bitwise.scala 102:21]
    node _shin_T_3 = shr(io.in_A, 16) @[Bitwise.scala 103:21]
    node _shin_T_4 = and(_shin_T_3, _shin_T_2) @[Bitwise.scala 103:31]
    node _shin_T_5 = bits(io.in_A, 15, 0) @[Bitwise.scala 103:46]
    node _shin_T_6 = shl(_shin_T_5, 16) @[Bitwise.scala 103:65]
    node _shin_T_7 = not(_shin_T_2) @[Bitwise.scala 103:77]
    node _shin_T_8 = and(_shin_T_6, _shin_T_7) @[Bitwise.scala 103:75]
    node _shin_T_9 = or(_shin_T_4, _shin_T_8) @[Bitwise.scala 103:39]
    node _shin_T_10 = bits(_shin_T_2, 23, 0) @[Bitwise.scala 102:28]
    node _shin_T_11 = shl(_shin_T_10, 8) @[Bitwise.scala 102:47]
    node _shin_T_12 = xor(_shin_T_2, _shin_T_11) @[Bitwise.scala 102:21]
    node _shin_T_13 = shr(_shin_T_9, 8) @[Bitwise.scala 103:21]
    node _shin_T_14 = and(_shin_T_13, _shin_T_12) @[Bitwise.scala 103:31]
    node _shin_T_15 = bits(_shin_T_9, 23, 0) @[Bitwise.scala 103:46]
    node _shin_T_16 = shl(_shin_T_15, 8) @[Bitwise.scala 103:65]
    node _shin_T_17 = not(_shin_T_12) @[Bitwise.scala 103:77]
    node _shin_T_18 = and(_shin_T_16, _shin_T_17) @[Bitwise.scala 103:75]
    node _shin_T_19 = or(_shin_T_14, _shin_T_18) @[Bitwise.scala 103:39]
    node _shin_T_20 = bits(_shin_T_12, 27, 0) @[Bitwise.scala 102:28]
    node _shin_T_21 = shl(_shin_T_20, 4) @[Bitwise.scala 102:47]
    node _shin_T_22 = xor(_shin_T_12, _shin_T_21) @[Bitwise.scala 102:21]
    node _shin_T_23 = shr(_shin_T_19, 4) @[Bitwise.scala 103:21]
    node _shin_T_24 = and(_shin_T_23, _shin_T_22) @[Bitwise.scala 103:31]
    node _shin_T_25 = bits(_shin_T_19, 27, 0) @[Bitwise.scala 103:46]
    node _shin_T_26 = shl(_shin_T_25, 4) @[Bitwise.scala 103:65]
    node _shin_T_27 = not(_shin_T_22) @[Bitwise.scala 103:77]
    node _shin_T_28 = and(_shin_T_26, _shin_T_27) @[Bitwise.scala 103:75]
    node _shin_T_29 = or(_shin_T_24, _shin_T_28) @[Bitwise.scala 103:39]
    node _shin_T_30 = bits(_shin_T_22, 29, 0) @[Bitwise.scala 102:28]
    node _shin_T_31 = shl(_shin_T_30, 2) @[Bitwise.scala 102:47]
    node _shin_T_32 = xor(_shin_T_22, _shin_T_31) @[Bitwise.scala 102:21]
    node _shin_T_33 = shr(_shin_T_29, 2) @[Bitwise.scala 103:21]
    node _shin_T_34 = and(_shin_T_33, _shin_T_32) @[Bitwise.scala 103:31]
    node _shin_T_35 = bits(_shin_T_29, 29, 0) @[Bitwise.scala 103:46]
    node _shin_T_36 = shl(_shin_T_35, 2) @[Bitwise.scala 103:65]
    node _shin_T_37 = not(_shin_T_32) @[Bitwise.scala 103:77]
    node _shin_T_38 = and(_shin_T_36, _shin_T_37) @[Bitwise.scala 103:75]
    node _shin_T_39 = or(_shin_T_34, _shin_T_38) @[Bitwise.scala 103:39]
    node _shin_T_40 = bits(_shin_T_32, 30, 0) @[Bitwise.scala 102:28]
    node _shin_T_41 = shl(_shin_T_40, 1) @[Bitwise.scala 102:47]
    node _shin_T_42 = xor(_shin_T_32, _shin_T_41) @[Bitwise.scala 102:21]
    node _shin_T_43 = shr(_shin_T_39, 1) @[Bitwise.scala 103:21]
    node _shin_T_44 = and(_shin_T_43, _shin_T_42) @[Bitwise.scala 103:31]
    node _shin_T_45 = bits(_shin_T_39, 30, 0) @[Bitwise.scala 103:46]
    node _shin_T_46 = shl(_shin_T_45, 1) @[Bitwise.scala 103:65]
    node _shin_T_47 = not(_shin_T_42) @[Bitwise.scala 103:77]
    node _shin_T_48 = and(_shin_T_46, _shin_T_47) @[Bitwise.scala 103:75]
    node _shin_T_49 = or(_shin_T_44, _shin_T_48) @[Bitwise.scala 103:39]
    node shin = mux(_shin_T, io.in_A, _shin_T_49) @[buggedAlu.scala 53:19]
    node _shiftr_T = bits(io.alu_Op, 0, 0) @[buggedAlu.scala 54:32]
    node _shiftr_T_1 = bits(shin, 31, 31) @[buggedAlu.scala 54:43]
    node shiftr_hi = and(_shiftr_T, _shiftr_T_1) @[buggedAlu.scala 54:36]
    node _shiftr_T_2 = cat(shiftr_hi, shin) @[Cat.scala 30:58]
    node _shiftr_T_3 = asSInt(_shiftr_T_2) @[buggedAlu.scala 54:61]
    node _shiftr_T_4 = dshr(_shiftr_T_3, shamt) @[buggedAlu.scala 54:68]
    node shiftr = bits(_shiftr_T_4, 31, 0) @[buggedAlu.scala 54:78]
    node _shitfl_T = shl(UInt<16>("h0ffff"), 16) @[Bitwise.scala 102:47]
    node _shitfl_T_1 = xor(UInt<32>("h0ffffffff"), _shitfl_T) @[Bitwise.scala 102:21]
    node _shitfl_T_2 = shr(shiftr, 16) @[Bitwise.scala 103:21]
    node _shitfl_T_3 = and(_shitfl_T_2, _shitfl_T_1) @[Bitwise.scala 103:31]
    node _shitfl_T_4 = bits(shiftr, 15, 0) @[Bitwise.scala 103:46]
    node _shitfl_T_5 = shl(_shitfl_T_4, 16) @[Bitwise.scala 103:65]
    node _shitfl_T_6 = not(_shitfl_T_1) @[Bitwise.scala 103:77]
    node _shitfl_T_7 = and(_shitfl_T_5, _shitfl_T_6) @[Bitwise.scala 103:75]
    node _shitfl_T_8 = or(_shitfl_T_3, _shitfl_T_7) @[Bitwise.scala 103:39]
    node _shitfl_T_9 = bits(_shitfl_T_1, 23, 0) @[Bitwise.scala 102:28]
    node _shitfl_T_10 = shl(_shitfl_T_9, 8) @[Bitwise.scala 102:47]
    node _shitfl_T_11 = xor(_shitfl_T_1, _shitfl_T_10) @[Bitwise.scala 102:21]
    node _shitfl_T_12 = shr(_shitfl_T_8, 8) @[Bitwise.scala 103:21]
    node _shitfl_T_13 = and(_shitfl_T_12, _shitfl_T_11) @[Bitwise.scala 103:31]
    node _shitfl_T_14 = bits(_shitfl_T_8, 23, 0) @[Bitwise.scala 103:46]
    node _shitfl_T_15 = shl(_shitfl_T_14, 8) @[Bitwise.scala 103:65]
    node _shitfl_T_16 = not(_shitfl_T_11) @[Bitwise.scala 103:77]
    node _shitfl_T_17 = and(_shitfl_T_15, _shitfl_T_16) @[Bitwise.scala 103:75]
    node _shitfl_T_18 = or(_shitfl_T_13, _shitfl_T_17) @[Bitwise.scala 103:39]
    node _shitfl_T_19 = bits(_shitfl_T_11, 27, 0) @[Bitwise.scala 102:28]
    node _shitfl_T_20 = shl(_shitfl_T_19, 4) @[Bitwise.scala 102:47]
    node _shitfl_T_21 = xor(_shitfl_T_11, _shitfl_T_20) @[Bitwise.scala 102:21]
    node _shitfl_T_22 = shr(_shitfl_T_18, 4) @[Bitwise.scala 103:21]
    node _shitfl_T_23 = and(_shitfl_T_22, _shitfl_T_21) @[Bitwise.scala 103:31]
    node _shitfl_T_24 = bits(_shitfl_T_18, 27, 0) @[Bitwise.scala 103:46]
    node _shitfl_T_25 = shl(_shitfl_T_24, 4) @[Bitwise.scala 103:65]
    node _shitfl_T_26 = not(_shitfl_T_21) @[Bitwise.scala 103:77]
    node _shitfl_T_27 = and(_shitfl_T_25, _shitfl_T_26) @[Bitwise.scala 103:75]
    node _shitfl_T_28 = or(_shitfl_T_23, _shitfl_T_27) @[Bitwise.scala 103:39]
    node _shitfl_T_29 = bits(_shitfl_T_21, 29, 0) @[Bitwise.scala 102:28]
    node _shitfl_T_30 = shl(_shitfl_T_29, 2) @[Bitwise.scala 102:47]
    node _shitfl_T_31 = xor(_shitfl_T_21, _shitfl_T_30) @[Bitwise.scala 102:21]
    node _shitfl_T_32 = shr(_shitfl_T_28, 2) @[Bitwise.scala 103:21]
    node _shitfl_T_33 = and(_shitfl_T_32, _shitfl_T_31) @[Bitwise.scala 103:31]
    node _shitfl_T_34 = bits(_shitfl_T_28, 29, 0) @[Bitwise.scala 103:46]
    node _shitfl_T_35 = shl(_shitfl_T_34, 2) @[Bitwise.scala 103:65]
    node _shitfl_T_36 = not(_shitfl_T_31) @[Bitwise.scala 103:77]
    node _shitfl_T_37 = and(_shitfl_T_35, _shitfl_T_36) @[Bitwise.scala 103:75]
    node _shitfl_T_38 = or(_shitfl_T_33, _shitfl_T_37) @[Bitwise.scala 103:39]
    node _shitfl_T_39 = bits(_shitfl_T_31, 30, 0) @[Bitwise.scala 102:28]
    node _shitfl_T_40 = shl(_shitfl_T_39, 1) @[Bitwise.scala 102:47]
    node _shitfl_T_41 = xor(_shitfl_T_31, _shitfl_T_40) @[Bitwise.scala 102:21]
    node _shitfl_T_42 = shr(_shitfl_T_38, 1) @[Bitwise.scala 103:21]
    node _shitfl_T_43 = and(_shitfl_T_42, _shitfl_T_41) @[Bitwise.scala 103:31]
    node _shitfl_T_44 = bits(_shitfl_T_38, 30, 0) @[Bitwise.scala 103:46]
    node _shitfl_T_45 = shl(_shitfl_T_44, 1) @[Bitwise.scala 103:65]
    node _shitfl_T_46 = not(_shitfl_T_41) @[Bitwise.scala 103:77]
    node _shitfl_T_47 = and(_shitfl_T_45, _shitfl_T_46) @[Bitwise.scala 103:75]
    node shitfl = or(_shitfl_T_43, _shitfl_T_47) @[Bitwise.scala 103:39]
    node div = div(io.in_A, io.in_B) @[buggedAlu.scala 56:23]
    node rem = rem(io.in_A, io.in_B) @[buggedAlu.scala 57:23]
    node mul = mul(io.in_A, io.in_B) @[buggedAlu.scala 58:23]
    node _out_T = eq(io.alu_Op, UInt<4>("h00")) @[buggedAlu.scala 63:20]
    node _out_T_1 = eq(io.alu_Op, UInt<4>("h01")) @[buggedAlu.scala 63:47]
    node _out_T_2 = or(_out_T, _out_T_1) @[buggedAlu.scala 63:33]
    node _out_T_3 = eq(io.alu_Op, UInt<4>("h04")) @[buggedAlu.scala 64:23]
    node _out_T_4 = eq(io.alu_Op, UInt<4>("h06")) @[buggedAlu.scala 64:48]
    node _out_T_5 = or(_out_T_3, _out_T_4) @[buggedAlu.scala 64:35]
    node _out_T_6 = eq(io.alu_Op, UInt<4>("h0b")) @[buggedAlu.scala 65:27]
    node _out_T_7 = eq(io.alu_Op, UInt<4>("h0a")) @[buggedAlu.scala 65:52]
    node _out_T_8 = or(_out_T_6, _out_T_7) @[buggedAlu.scala 65:39]
    node _out_T_9 = eq(io.alu_Op, UInt<4>("h02")) @[buggedAlu.scala 66:31]
    node _out_T_10 = eq(io.alu_Op, UInt<4>("h0e")) @[buggedAlu.scala 67:35]
    node _out_T_11 = and(io.in_A, io.in_B) @[buggedAlu.scala 67:57]
    node _out_T_12 = eq(io.alu_Op, UInt<4>("h0c")) @[buggedAlu.scala 68:39]
    node _out_T_13 = or(io.in_A, io.in_B) @[buggedAlu.scala 68:60]
    node _out_T_14 = eq(io.alu_Op, UInt<4>("h08")) @[buggedAlu.scala 69:43]
    node _out_T_15 = xor(io.in_A, io.in_B) @[buggedAlu.scala 69:65]
    node _out_T_16 = eq(io.alu_Op, UInt<4>("h0d")) @[buggedAlu.scala 70:47]
    node _out_T_17 = eq(io.alu_Op, UInt<4>("h0f")) @[buggedAlu.scala 71:51]
    node _out_T_18 = eq(io.alu_Op, UInt<4>("h03")) @[buggedAlu.scala 72:55]
    node _out_T_19 = eq(io.alu_Op, UInt<4>("h03")) @[buggedAlu.scala 73:60]
    node _out_T_20 = eq(io.alu_Op, UInt<4>("h05")) @[buggedAlu.scala 74:64]
    node _out_T_21 = eq(io.alu_Op, UInt<4>("h07")) @[buggedAlu.scala 75:67]
    node _out_T_22 = eq(io.alu_Op, UInt<4>("h07")) @[buggedAlu.scala 76:71]
    node _out_T_23 = mux(_out_T_22, rem, UInt<1>("h00")) @[buggedAlu.scala 76:60]
    node _out_T_24 = mux(_out_T_21, rem, _out_T_23) @[buggedAlu.scala 75:56]
    node _out_T_25 = mux(_out_T_20, div, _out_T_24) @[buggedAlu.scala 74:53]
    node _out_T_26 = mux(_out_T_19, div, _out_T_25) @[buggedAlu.scala 73:49]
    node _out_T_27 = mux(_out_T_18, div, _out_T_26) @[buggedAlu.scala 72:44]
    node _out_T_28 = mux(_out_T_17, io.in_B, _out_T_27) @[buggedAlu.scala 71:40]
    node _out_T_29 = mux(_out_T_16, io.in_A, _out_T_28) @[buggedAlu.scala 70:36]
    node _out_T_30 = mux(_out_T_14, _out_T_15, _out_T_29) @[buggedAlu.scala 69:32]
    node _out_T_31 = mux(_out_T_12, _out_T_13, _out_T_30) @[buggedAlu.scala 68:28]
    node _out_T_32 = mux(_out_T_10, _out_T_11, _out_T_31) @[buggedAlu.scala 67:24]
    node _out_T_33 = mux(_out_T_9, shitfl, _out_T_32) @[buggedAlu.scala 66:20]
    node _out_T_34 = mux(_out_T_8, shiftr, _out_T_33) @[buggedAlu.scala 65:16]
    node _out_T_35 = mux(_out_T_5, cmp, _out_T_34) @[buggedAlu.scala 64:12]
    node out = mux(_out_T_2, sum, _out_T_35) @[buggedAlu.scala 63:8]
    io.out <= out @[buggedAlu.scala 78:12]
    io.sum <= sum @[buggedAlu.scala 79:12]
    
  module DataPath : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : UInt<32>}
    
    io.out <= UInt<1>("h00") @[DataPath.scala 11:10]
    inst pc of PC @[DataPath.scala 13:18]
    pc.clock <= clock
    pc.reset <= reset
    inst cu of CU @[DataPath.scala 14:18]
    cu.clock <= clock
    cu.reset <= reset
    inst regfile of RegisterFile @[DataPath.scala 15:23]
    regfile.clock <= clock
    regfile.reset <= reset
    inst insmem of InstMem @[DataPath.scala 16:22]
    insmem.clock <= clock
    insmem.reset <= reset
    inst alu of ALU1 @[DataPath.scala 18:19]
    alu.clock <= clock
    alu.reset <= reset
    insmem.io.addr <= pc.io.nextaddr @[DataPath.scala 21:18]
    cu.io.ins <= insmem.io.inst @[DataPath.scala 22:13]
    alu.io.alu_Op <= cu.io.func @[DataPath.scala 23:17]
    regfile.io.Wen <= cu.io.RegWrite @[DataPath.scala 24:18]
    regfile.io.RD <= cu.io.RD @[DataPath.scala 25:17]
    regfile.io.Rs1in <= cu.io.Rs1 @[DataPath.scala 26:20]
    regfile.io.Rs2in <= cu.io.Rs2 @[DataPath.scala 27:20]
    alu.io.in_A <= regfile.io.Rs1out @[DataPath.scala 29:15]
    node _T = eq(cu.io.Instype, UInt<1>("h00")) @[DataPath.scala 30:8]
    when _T : @[DataPath.scala 30:24]
      alu.io.in_B <= cu.io.Imm @[DataPath.scala 31:17]
      skip @[DataPath.scala 30:24]
    else : @[DataPath.scala 33:15]
      alu.io.in_B <= regfile.io.Rs2out @[DataPath.scala 34:19]
      skip @[DataPath.scala 33:15]
    regfile.io.datain <= alu.io.out @[DataPath.scala 37:21]
    io.out <= alu.io.out @[DataPath.scala 39:10]
    
